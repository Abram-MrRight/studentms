name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Install backend dependencies
        working-directory: backend
        run: npm install

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Install backend dependencies
        working-directory: backend
        run: npm install

      - name: Build frontend
        working-directory: frontend
        run: npm run build

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Tag and push current stable image
        run: |
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:staging || true
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:staging ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:stable
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:stable

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:0.1 .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:0.1
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:0.1 ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:staging
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:staging 

      - name: Check deployment status
        run: |
          if [ "$(docker inspect -f '{{.State.Health.Status}}' studentms-app)" != "healthy" ]; then
            echo "Deployment failed. Rolling back to stable version."
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:stable
            docker run -d --name studentms-app ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:stable
          else
            echo "Deployment successful."
          fi

  deploy-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Tag and push production Docker image
        run: |
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:staging || true
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:staging ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:prod
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:prod

      - name: Deploy to production
        run: |
          docker run -d --name studentms-app-prod ${{ secrets.DOCKER_HUB_USERNAME }}/studentms-app:prod
